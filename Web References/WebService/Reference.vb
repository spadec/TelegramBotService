'------------------------------------------------------------------------------
' <auto-generated>
'     Этот код создан программой.
'     Исполняемая версия:4.0.30319.42000
'
'     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
'     повторной генерации кода.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Этот исходный текст был создан автоматически: Microsoft.VSDesigner, версия: 4.0.30319.42000.
'
Namespace WebService
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="ServiceSoap", [Namespace]:="test123")>  _
    Partial Public Class Service
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private FillXmlOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDEmeterNPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetCurrentPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDObjectNPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDateTimeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ControlerSKOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatmentsDllZoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private StatmentsDllOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDEmeterNPbyObjOperationCompleted As System.Threading.SendOrPostCallback
        
        Private idTmeterOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetDateTimeGVSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Rpt_PrintCardConsumer_JurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObjectEEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ObjectTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountCardCGPOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountCardERCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AccountCardERC_RaionFizOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SchetKvitOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SchetKvitByTempRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SchetKvitByTempRecord_RaionFizOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Rpt_PrintCardConsumerInvoice_JurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private UserCardOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CabinetLogStatmetsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private bank_accountOperationCompleted As System.Threading.SendOrPostCallback
        
        Private bank_account_typeOperationCompleted As System.Threading.SendOrPostCallback
        
        Private Print_ERCVedomostOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPeopleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPlateOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetOldPeopleOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetClassOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTariffOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTariffZoneOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ERC_SelectOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ERC_InsertOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoViewOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoViewGVSOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoViewJurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindEmetersJurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindObjectsOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindConsumerOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowEEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ShowTEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindObjectsEEOperationCompleted As System.Threading.SendOrPostCallback
        
        Private FindObjectsEPoweringOperationCompleted As System.Threading.SendOrPostCallback
        
        Private DeclaredConsumptionOperationCompleted As System.Threading.SendOrPostCallback
        
        Private AmountWithoutPUOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoTableJurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private YakimovOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetTempRecordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPeriodListOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveActualWMOperationCompleted As System.Threading.SendOrPostCallback
        
        Private SaveActualOperationCompleted As System.Threading.SendOrPostCallback
        
        Private tmeters_jurOperationCompleted As System.Threading.SendOrPostCallback
        
        Private tmeter_datesOperationCompleted As System.Threading.SendOrPostCallback
        
        Private InfoTmeterAscuteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private ReportTmeterAscuteOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPeriodList_CardAbonentOperationCompleted As System.Threading.SendOrPostCallback
        
        Private OnOffCabinetOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetPeriodListERCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetIDAccountingOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetBeginDayPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetEndDayPeriodOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetAddressObjectsERCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private GetInfoContractsERCOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.TelegramBotService.My.MySettings.Default.TelegramBotService_WebService_Service
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event FillXmlCompleted As FillXmlCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDEmeterNPCompleted As GetIDEmeterNPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDPeriodCompleted As GetIDPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetCurrentPeriodCompleted As GetCurrentPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDObjectNPCompleted As GetIDObjectNPCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDateTimeCompleted As GetDateTimeCompletedEventHandler
        
        '''<remarks/>
        Public Event ControlerSKCompleted As ControlerSKCompletedEventHandler
        
        '''<remarks/>
        Public Event StatmentsDllZoneCompleted As StatmentsDllZoneCompletedEventHandler
        
        '''<remarks/>
        Public Event StatmentsDllCompleted As StatmentsDllCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDEmeterNPbyObjCompleted As GetIDEmeterNPbyObjCompletedEventHandler
        
        '''<remarks/>
        Public Event idTmeterCompleted As idTmeterCompletedEventHandler
        
        '''<remarks/>
        Public Event GetDateTimeGVSCompleted As GetDateTimeGVSCompletedEventHandler
        
        '''<remarks/>
        Public Event Rpt_PrintCardConsumer_JurCompleted As Rpt_PrintCardConsumer_JurCompletedEventHandler
        
        '''<remarks/>
        Public Event ObjectEECompleted As ObjectEECompletedEventHandler
        
        '''<remarks/>
        Public Event ObjectTECompleted As ObjectTECompletedEventHandler
        
        '''<remarks/>
        Public Event AccountCardCGPCompleted As AccountCardCGPCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountCardERCCompleted As AccountCardERCCompletedEventHandler
        
        '''<remarks/>
        Public Event AccountCardERC_RaionFizCompleted As AccountCardERC_RaionFizCompletedEventHandler
        
        '''<remarks/>
        Public Event SchetKvitCompleted As SchetKvitCompletedEventHandler
        
        '''<remarks/>
        Public Event SchetKvitByTempRecordCompleted As SchetKvitByTempRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event SchetKvitByTempRecord_RaionFizCompleted As SchetKvitByTempRecord_RaionFizCompletedEventHandler
        
        '''<remarks/>
        Public Event Rpt_PrintCardConsumerInvoice_JurCompleted As Rpt_PrintCardConsumerInvoice_JurCompletedEventHandler
        
        '''<remarks/>
        Public Event UserCardCompleted As UserCardCompletedEventHandler
        
        '''<remarks/>
        Public Event CabinetLogStatmetsCompleted As CabinetLogStatmetsCompletedEventHandler
        
        '''<remarks/>
        Public Event bank_accountCompleted As bank_accountCompletedEventHandler
        
        '''<remarks/>
        Public Event bank_account_typeCompleted As bank_account_typeCompletedEventHandler
        
        '''<remarks/>
        Public Event Print_ERCVedomostCompleted As Print_ERCVedomostCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPeopleCompleted As GetPeopleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPlateCompleted As GetPlateCompletedEventHandler
        
        '''<remarks/>
        Public Event GetOldPeopleCompleted As GetOldPeopleCompletedEventHandler
        
        '''<remarks/>
        Public Event GetClassCompleted As GetClassCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTariffCompleted As GetTariffCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTariffZoneCompleted As GetTariffZoneCompletedEventHandler
        
        '''<remarks/>
        Public Event ERC_SelectCompleted As ERC_SelectCompletedEventHandler
        
        '''<remarks/>
        Public Event ERC_InsertCompleted As ERC_InsertCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoViewCompleted As GetInfoViewCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoViewGVSCompleted As GetInfoViewGVSCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoViewJurCompleted As GetInfoViewJurCompletedEventHandler
        
        '''<remarks/>
        Public Event FindEmetersJurCompleted As FindEmetersJurCompletedEventHandler
        
        '''<remarks/>
        Public Event FindObjectsCompleted As FindObjectsCompletedEventHandler
        
        '''<remarks/>
        Public Event FindConsumerCompleted As FindConsumerCompletedEventHandler
        
        '''<remarks/>
        Public Event ShowEECompleted As ShowEECompletedEventHandler
        
        '''<remarks/>
        Public Event ShowTECompleted As ShowTECompletedEventHandler
        
        '''<remarks/>
        Public Event FindObjectsEECompleted As FindObjectsEECompletedEventHandler
        
        '''<remarks/>
        Public Event FindObjectsEPoweringCompleted As FindObjectsEPoweringCompletedEventHandler
        
        '''<remarks/>
        Public Event DeclaredConsumptionCompleted As DeclaredConsumptionCompletedEventHandler
        
        '''<remarks/>
        Public Event AmountWithoutPUCompleted As AmountWithoutPUCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoTableJurCompleted As GetInfoTableJurCompletedEventHandler
        
        '''<remarks/>
        Public Event YakimovCompleted As YakimovCompletedEventHandler
        
        '''<remarks/>
        Public Event GetTempRecordCompleted As GetTempRecordCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPeriodListCompleted As GetPeriodListCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveActualWMCompleted As SaveActualWMCompletedEventHandler
        
        '''<remarks/>
        Public Event SaveActualCompleted As SaveActualCompletedEventHandler
        
        '''<remarks/>
        Public Event tmeters_jurCompleted As tmeters_jurCompletedEventHandler
        
        '''<remarks/>
        Public Event tmeter_datesCompleted As tmeter_datesCompletedEventHandler
        
        '''<remarks/>
        Public Event InfoTmeterAscuteCompleted As InfoTmeterAscuteCompletedEventHandler
        
        '''<remarks/>
        Public Event ReportTmeterAscuteCompleted As ReportTmeterAscuteCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPeriodList_CardAbonentCompleted As GetPeriodList_CardAbonentCompletedEventHandler
        
        '''<remarks/>
        Public Event OnOffCabinetCompleted As OnOffCabinetCompletedEventHandler
        
        '''<remarks/>
        Public Event GetPeriodListERCCompleted As GetPeriodListERCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetIDAccountingCompleted As GetIDAccountingCompletedEventHandler
        
        '''<remarks/>
        Public Event GetBeginDayPeriodCompleted As GetBeginDayPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetEndDayPeriodCompleted As GetEndDayPeriodCompletedEventHandler
        
        '''<remarks/>
        Public Event GetAddressObjectsERCCompleted As GetAddressObjectsERCCompletedEventHandler
        
        '''<remarks/>
        Public Event GetInfoContractsERCCompleted As GetInfoContractsERCCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FillXml", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FillXml(ByVal mType As String, ByVal mNumberContractE As String, ByVal mNumberContractT As String, ByVal IDRaion As Integer, ByVal ERC As Integer) As String
            Dim results() As Object = Me.Invoke("FillXml", New Object() {mType, mNumberContractE, mNumberContractT, IDRaion, ERC})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FillXmlAsync(ByVal mType As String, ByVal mNumberContractE As String, ByVal mNumberContractT As String, ByVal IDRaion As Integer, ByVal ERC As Integer)
            Me.FillXmlAsync(mType, mNumberContractE, mNumberContractT, IDRaion, ERC, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FillXmlAsync(ByVal mType As String, ByVal mNumberContractE As String, ByVal mNumberContractT As String, ByVal IDRaion As Integer, ByVal ERC As Integer, ByVal userState As Object)
            If (Me.FillXmlOperationCompleted Is Nothing) Then
                Me.FillXmlOperationCompleted = AddressOf Me.OnFillXmlOperationCompleted
            End If
            Me.InvokeAsync("FillXml", New Object() {mType, mNumberContractE, mNumberContractT, IDRaion, ERC}, Me.FillXmlOperationCompleted, userState)
        End Sub
        
        Private Sub OnFillXmlOperationCompleted(ByVal arg As Object)
            If (Not (Me.FillXmlCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FillXmlCompleted(Me, New FillXmlCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetIDEmeterNP", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDEmeterNP(ByVal idContract As Integer, ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetIDEmeterNP", New Object() {idContract, IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDEmeterNPAsync(ByVal idContract As Integer, ByVal IDRaion As Integer)
            Me.GetIDEmeterNPAsync(idContract, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDEmeterNPAsync(ByVal idContract As Integer, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetIDEmeterNPOperationCompleted Is Nothing) Then
                Me.GetIDEmeterNPOperationCompleted = AddressOf Me.OnGetIDEmeterNPOperationCompleted
            End If
            Me.InvokeAsync("GetIDEmeterNP", New Object() {idContract, IDRaion}, Me.GetIDEmeterNPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDEmeterNPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDEmeterNPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDEmeterNPCompleted(Me, New GetIDEmeterNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetIDPeriod", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDPeriod(ByVal Datetime As Date, ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetIDPeriod", New Object() {Datetime, IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDPeriodAsync(ByVal Datetime As Date, ByVal IDRaion As Integer)
            Me.GetIDPeriodAsync(Datetime, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDPeriodAsync(ByVal Datetime As Date, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetIDPeriodOperationCompleted Is Nothing) Then
                Me.GetIDPeriodOperationCompleted = AddressOf Me.OnGetIDPeriodOperationCompleted
            End If
            Me.InvokeAsync("GetIDPeriod", New Object() {Datetime, IDRaion}, Me.GetIDPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDPeriodCompleted(Me, New GetIDPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetCurrentPeriod", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentPeriod() As Object
            Dim results() As Object = Me.Invoke("GetCurrentPeriod", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetCurrentPeriodAsync()
            Me.GetCurrentPeriodAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetCurrentPeriodAsync(ByVal userState As Object)
            If (Me.GetCurrentPeriodOperationCompleted Is Nothing) Then
                Me.GetCurrentPeriodOperationCompleted = AddressOf Me.OnGetCurrentPeriodOperationCompleted
            End If
            Me.InvokeAsync("GetCurrentPeriod", New Object(-1) {}, Me.GetCurrentPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetCurrentPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetCurrentPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetCurrentPeriodCompleted(Me, New GetCurrentPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetIDObjectNP", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDObjectNP(ByVal idContract As Integer) As Object
            Dim results() As Object = Me.Invoke("GetIDObjectNP", New Object() {idContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDObjectNPAsync(ByVal idContract As Integer)
            Me.GetIDObjectNPAsync(idContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDObjectNPAsync(ByVal idContract As Integer, ByVal userState As Object)
            If (Me.GetIDObjectNPOperationCompleted Is Nothing) Then
                Me.GetIDObjectNPOperationCompleted = AddressOf Me.OnGetIDObjectNPOperationCompleted
            End If
            Me.InvokeAsync("GetIDObjectNP", New Object() {idContract}, Me.GetIDObjectNPOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDObjectNPOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDObjectNPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDObjectNPCompleted(Me, New GetIDObjectNPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetDateTime", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDateTime(ByVal IDEmeterNP As Integer, ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetDateTime", New Object() {IDEmeterNP, IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDateTimeAsync(ByVal IDEmeterNP As Integer, ByVal IDRaion As Integer)
            Me.GetDateTimeAsync(IDEmeterNP, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDateTimeAsync(ByVal IDEmeterNP As Integer, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetDateTimeOperationCompleted Is Nothing) Then
                Me.GetDateTimeOperationCompleted = AddressOf Me.OnGetDateTimeOperationCompleted
            End If
            Me.InvokeAsync("GetDateTime", New Object() {IDEmeterNP, IDRaion}, Me.GetDateTimeOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDateTimeOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDateTimeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDateTimeCompleted(Me, New GetDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ControlerSK", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ControlerSK(ByVal IDEmeterNP As Integer) As Object
            Dim results() As Object = Me.Invoke("ControlerSK", New Object() {IDEmeterNP})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ControlerSKAsync(ByVal IDEmeterNP As Integer)
            Me.ControlerSKAsync(IDEmeterNP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ControlerSKAsync(ByVal IDEmeterNP As Integer, ByVal userState As Object)
            If (Me.ControlerSKOperationCompleted Is Nothing) Then
                Me.ControlerSKOperationCompleted = AddressOf Me.OnControlerSKOperationCompleted
            End If
            Me.InvokeAsync("ControlerSK", New Object() {IDEmeterNP}, Me.ControlerSKOperationCompleted, userState)
        End Sub
        
        Private Sub OnControlerSKOperationCompleted(ByVal arg As Object)
            If (Not (Me.ControlerSKCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ControlerSKCompleted(Me, New ControlerSKCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/StatmentsDllZone", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatmentsDllZone(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display1 As Integer, ByVal Display2 As Integer, ByVal Display3 As Integer) As Boolean
            Dim results() As Object = Me.Invoke("StatmentsDllZone", New Object() {idContract, idEmeter, Display1, Display2, Display3})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatmentsDllZoneAsync(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display1 As Integer, ByVal Display2 As Integer, ByVal Display3 As Integer)
            Me.StatmentsDllZoneAsync(idContract, idEmeter, Display1, Display2, Display3, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatmentsDllZoneAsync(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display1 As Integer, ByVal Display2 As Integer, ByVal Display3 As Integer, ByVal userState As Object)
            If (Me.StatmentsDllZoneOperationCompleted Is Nothing) Then
                Me.StatmentsDllZoneOperationCompleted = AddressOf Me.OnStatmentsDllZoneOperationCompleted
            End If
            Me.InvokeAsync("StatmentsDllZone", New Object() {idContract, idEmeter, Display1, Display2, Display3}, Me.StatmentsDllZoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatmentsDllZoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatmentsDllZoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatmentsDllZoneCompleted(Me, New StatmentsDllZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/StatmentsDll", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function StatmentsDll(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display As Integer) As Boolean
            Dim results() As Object = Me.Invoke("StatmentsDll", New Object() {idContract, idEmeter, Display})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub StatmentsDllAsync(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display As Integer)
            Me.StatmentsDllAsync(idContract, idEmeter, Display, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub StatmentsDllAsync(ByVal idContract As Integer, ByVal idEmeter As Integer, ByVal Display As Integer, ByVal userState As Object)
            If (Me.StatmentsDllOperationCompleted Is Nothing) Then
                Me.StatmentsDllOperationCompleted = AddressOf Me.OnStatmentsDllOperationCompleted
            End If
            Me.InvokeAsync("StatmentsDll", New Object() {idContract, idEmeter, Display}, Me.StatmentsDllOperationCompleted, userState)
        End Sub
        
        Private Sub OnStatmentsDllOperationCompleted(ByVal arg As Object)
            If (Not (Me.StatmentsDllCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent StatmentsDllCompleted(Me, New StatmentsDllCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetIDEmeterNPbyObj", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDEmeterNPbyObj(ByVal idObject As Integer) As Object
            Dim results() As Object = Me.Invoke("GetIDEmeterNPbyObj", New Object() {idObject})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDEmeterNPbyObjAsync(ByVal idObject As Integer)
            Me.GetIDEmeterNPbyObjAsync(idObject, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDEmeterNPbyObjAsync(ByVal idObject As Integer, ByVal userState As Object)
            If (Me.GetIDEmeterNPbyObjOperationCompleted Is Nothing) Then
                Me.GetIDEmeterNPbyObjOperationCompleted = AddressOf Me.OnGetIDEmeterNPbyObjOperationCompleted
            End If
            Me.InvokeAsync("GetIDEmeterNPbyObj", New Object() {idObject}, Me.GetIDEmeterNPbyObjOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDEmeterNPbyObjOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDEmeterNPbyObjCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDEmeterNPbyObjCompleted(Me, New GetIDEmeterNPbyObjCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/idTmeter", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function idTmeter(ByVal NumberContract As String) As Object
            Dim results() As Object = Me.Invoke("idTmeter", New Object() {NumberContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub idTmeterAsync(ByVal NumberContract As String)
            Me.idTmeterAsync(NumberContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub idTmeterAsync(ByVal NumberContract As String, ByVal userState As Object)
            If (Me.idTmeterOperationCompleted Is Nothing) Then
                Me.idTmeterOperationCompleted = AddressOf Me.OnidTmeterOperationCompleted
            End If
            Me.InvokeAsync("idTmeter", New Object() {NumberContract}, Me.idTmeterOperationCompleted, userState)
        End Sub
        
        Private Sub OnidTmeterOperationCompleted(ByVal arg As Object)
            If (Not (Me.idTmeterCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent idTmeterCompleted(Me, New idTmeterCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetDateTimeGVS", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetDateTimeGVS(ByVal IDtmeter As Integer) As Object
            Dim results() As Object = Me.Invoke("GetDateTimeGVS", New Object() {IDtmeter})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetDateTimeGVSAsync(ByVal IDtmeter As Integer)
            Me.GetDateTimeGVSAsync(IDtmeter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetDateTimeGVSAsync(ByVal IDtmeter As Integer, ByVal userState As Object)
            If (Me.GetDateTimeGVSOperationCompleted Is Nothing) Then
                Me.GetDateTimeGVSOperationCompleted = AddressOf Me.OnGetDateTimeGVSOperationCompleted
            End If
            Me.InvokeAsync("GetDateTimeGVS", New Object() {IDtmeter}, Me.GetDateTimeGVSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetDateTimeGVSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetDateTimeGVSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetDateTimeGVSCompleted(Me, New GetDateTimeGVSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/Rpt_PrintCardConsumer_Jur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Rpt_PrintCardConsumer_Jur(ByVal NamePeriod As String, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal IDEndPeriod As Integer, ByVal NumberContract As String, ByVal ConsumerName As String, ByVal FullAddress As String, ByVal strHandler As String, ByVal Raion As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Rpt_PrintCardConsumer_Jur", New Object() {NamePeriod, IDContract, IDStartPeriod, IDEndPeriod, NumberContract, ConsumerName, FullAddress, strHandler, Raion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Rpt_PrintCardConsumer_JurAsync(ByVal NamePeriod As String, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal IDEndPeriod As Integer, ByVal NumberContract As String, ByVal ConsumerName As String, ByVal FullAddress As String, ByVal strHandler As String, ByVal Raion As String)
            Me.Rpt_PrintCardConsumer_JurAsync(NamePeriod, IDContract, IDStartPeriod, IDEndPeriod, NumberContract, ConsumerName, FullAddress, strHandler, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Rpt_PrintCardConsumer_JurAsync(ByVal NamePeriod As String, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal IDEndPeriod As Integer, ByVal NumberContract As String, ByVal ConsumerName As String, ByVal FullAddress As String, ByVal strHandler As String, ByVal Raion As String, ByVal userState As Object)
            If (Me.Rpt_PrintCardConsumer_JurOperationCompleted Is Nothing) Then
                Me.Rpt_PrintCardConsumer_JurOperationCompleted = AddressOf Me.OnRpt_PrintCardConsumer_JurOperationCompleted
            End If
            Me.InvokeAsync("Rpt_PrintCardConsumer_Jur", New Object() {NamePeriod, IDContract, IDStartPeriod, IDEndPeriod, NumberContract, ConsumerName, FullAddress, strHandler, Raion}, Me.Rpt_PrintCardConsumer_JurOperationCompleted, userState)
        End Sub
        
        Private Sub OnRpt_PrintCardConsumer_JurOperationCompleted(ByVal arg As Object)
            If (Not (Me.Rpt_PrintCardConsumer_JurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Rpt_PrintCardConsumer_JurCompleted(Me, New Rpt_PrintCardConsumer_JurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ObjectEE", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObjectEE(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String, ByVal Raion As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ObjectEE", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief, Raion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObjectEEAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String, ByVal Raion As String)
            Me.ObjectEEAsync(PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObjectEEAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String, ByVal Raion As String, ByVal userState As Object)
            If (Me.ObjectEEOperationCompleted Is Nothing) Then
                Me.ObjectEEOperationCompleted = AddressOf Me.OnObjectEEOperationCompleted
            End If
            Me.InvokeAsync("ObjectEE", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief, Raion}, Me.ObjectEEOperationCompleted, userState)
        End Sub
        
        Private Sub OnObjectEEOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObjectEECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObjectEECompleted(Me, New ObjectEECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ObjectTE", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ObjectTE(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ObjectTE", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub ObjectTEAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String)
            Me.ObjectTEAsync(PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ObjectTEAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal NumberContract As String, ByVal DisplayName As String, ByVal ShortAddress As String, ByVal Chief As String, ByVal userState As Object)
            If (Me.ObjectTEOperationCompleted Is Nothing) Then
                Me.ObjectTEOperationCompleted = AddressOf Me.OnObjectTEOperationCompleted
            End If
            Me.InvokeAsync("ObjectTE", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, NumberContract, DisplayName, ShortAddress, Chief}, Me.ObjectTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnObjectTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.ObjectTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ObjectTECompleted(Me, New ObjectTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/AccountCardCGP", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountCardCGP(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("AccountCardCGP", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountCardCGPAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double)
            Me.AccountCardCGPAsync(PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountCardCGPAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double, ByVal userState As Object)
            If (Me.AccountCardCGPOperationCompleted Is Nothing) Then
                Me.AccountCardCGPOperationCompleted = AddressOf Me.OnAccountCardCGPOperationCompleted
            End If
            Me.InvokeAsync("AccountCardCGP", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance}, Me.AccountCardCGPOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountCardCGPOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountCardCGPCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountCardCGPCompleted(Me, New AccountCardCGPCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/AccountCardERC", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountCardERC(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("AccountCardERC", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountCardERCAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double)
            Me.AccountCardERCAsync(PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountCardERCAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double, ByVal userState As Object)
            If (Me.AccountCardERCOperationCompleted Is Nothing) Then
                Me.AccountCardERCOperationCompleted = AddressOf Me.OnAccountCardERCOperationCompleted
            End If
            Me.InvokeAsync("AccountCardERC", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance}, Me.AccountCardERCOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountCardERCOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountCardERCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountCardERCCompleted(Me, New AccountCardERCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/AccountCardERC_RaionFiz", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AccountCardERC_RaionFiz(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double, ByVal IDRaion As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("AccountCardERC_RaionFiz", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance, IDRaion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub AccountCardERC_RaionFizAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double, ByVal IDRaion As Integer)
            Me.AccountCardERC_RaionFizAsync(PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AccountCardERC_RaionFizAsync(ByVal PeriodName As String, ByVal IDContract As Integer, ByVal BeginIDPeriod As Integer, ByVal EndIDPeriod As Integer, ByVal numbercontract As String, ByVal displayname As String, ByVal shortaddress As String, ByVal beginbalance As Double, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.AccountCardERC_RaionFizOperationCompleted Is Nothing) Then
                Me.AccountCardERC_RaionFizOperationCompleted = AddressOf Me.OnAccountCardERC_RaionFizOperationCompleted
            End If
            Me.InvokeAsync("AccountCardERC_RaionFiz", New Object() {PeriodName, IDContract, BeginIDPeriod, EndIDPeriod, numbercontract, displayname, shortaddress, beginbalance, IDRaion}, Me.AccountCardERC_RaionFizOperationCompleted, userState)
        End Sub
        
        Private Sub OnAccountCardERC_RaionFizOperationCompleted(ByVal arg As Object)
            If (Not (Me.AccountCardERC_RaionFizCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AccountCardERC_RaionFizCompleted(Me, New AccountCardERC_RaionFizCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/SchetKvit", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SchetKvit(ByVal IDPeriod As Integer, ByVal IDContract As Integer, ByVal UserName As String, ByVal IsAll As Boolean, ByVal SKREK As Integer, ByVal strFeederT As String, ByVal NamePeriod As String, ByVal lngTypeReport As Integer, ByVal count As Integer, ByVal Balance As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("SchetKvit", New Object() {IDPeriod, IDContract, UserName, IsAll, SKREK, strFeederT, NamePeriod, lngTypeReport, count, Balance})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SchetKvitAsync(ByVal IDPeriod As Integer, ByVal IDContract As Integer, ByVal UserName As String, ByVal IsAll As Boolean, ByVal SKREK As Integer, ByVal strFeederT As String, ByVal NamePeriod As String, ByVal lngTypeReport As Integer, ByVal count As Integer, ByVal Balance As Integer)
            Me.SchetKvitAsync(IDPeriod, IDContract, UserName, IsAll, SKREK, strFeederT, NamePeriod, lngTypeReport, count, Balance, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SchetKvitAsync(ByVal IDPeriod As Integer, ByVal IDContract As Integer, ByVal UserName As String, ByVal IsAll As Boolean, ByVal SKREK As Integer, ByVal strFeederT As String, ByVal NamePeriod As String, ByVal lngTypeReport As Integer, ByVal count As Integer, ByVal Balance As Integer, ByVal userState As Object)
            If (Me.SchetKvitOperationCompleted Is Nothing) Then
                Me.SchetKvitOperationCompleted = AddressOf Me.OnSchetKvitOperationCompleted
            End If
            Me.InvokeAsync("SchetKvit", New Object() {IDPeriod, IDContract, UserName, IsAll, SKREK, strFeederT, NamePeriod, lngTypeReport, count, Balance}, Me.SchetKvitOperationCompleted, userState)
        End Sub
        
        Private Sub OnSchetKvitOperationCompleted(ByVal arg As Object)
            If (Not (Me.SchetKvitCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SchetKvitCompleted(Me, New SchetKvitCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/SchetKvitByTempRecord", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SchetKvitByTempRecord(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("SchetKvitByTempRecord", New Object() {IDPeriod, IDTempReport, UserName, NamePeriod})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SchetKvitByTempRecordAsync(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String)
            Me.SchetKvitByTempRecordAsync(IDPeriod, IDTempReport, UserName, NamePeriod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SchetKvitByTempRecordAsync(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String, ByVal userState As Object)
            If (Me.SchetKvitByTempRecordOperationCompleted Is Nothing) Then
                Me.SchetKvitByTempRecordOperationCompleted = AddressOf Me.OnSchetKvitByTempRecordOperationCompleted
            End If
            Me.InvokeAsync("SchetKvitByTempRecord", New Object() {IDPeriod, IDTempReport, UserName, NamePeriod}, Me.SchetKvitByTempRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnSchetKvitByTempRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.SchetKvitByTempRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SchetKvitByTempRecordCompleted(Me, New SchetKvitByTempRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/SchetKvitByTempRecord_RaionFiz", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SchetKvitByTempRecord_RaionFiz(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String, ByVal IDRaion As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("SchetKvitByTempRecord_RaionFiz", New Object() {IDPeriod, IDTempReport, UserName, NamePeriod, IDRaion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub SchetKvitByTempRecord_RaionFizAsync(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String, ByVal IDRaion As Integer)
            Me.SchetKvitByTempRecord_RaionFizAsync(IDPeriod, IDTempReport, UserName, NamePeriod, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SchetKvitByTempRecord_RaionFizAsync(ByVal IDPeriod As Integer, ByVal IDTempReport As Integer, ByVal UserName As String, ByVal NamePeriod As String, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.SchetKvitByTempRecord_RaionFizOperationCompleted Is Nothing) Then
                Me.SchetKvitByTempRecord_RaionFizOperationCompleted = AddressOf Me.OnSchetKvitByTempRecord_RaionFizOperationCompleted
            End If
            Me.InvokeAsync("SchetKvitByTempRecord_RaionFiz", New Object() {IDPeriod, IDTempReport, UserName, NamePeriod, IDRaion}, Me.SchetKvitByTempRecord_RaionFizOperationCompleted, userState)
        End Sub
        
        Private Sub OnSchetKvitByTempRecord_RaionFizOperationCompleted(ByVal arg As Object)
            If (Not (Me.SchetKvitByTempRecord_RaionFizCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SchetKvitByTempRecord_RaionFizCompleted(Me, New SchetKvitByTempRecord_RaionFizCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/Rpt_PrintCardConsumerInvoice_Jur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Rpt_PrintCardConsumerInvoice_Jur(ByVal Notification As Boolean, ByVal Verification As Boolean, ByVal Prepayment As Boolean, ByVal Autograph As Boolean, ByVal Bill As Boolean, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal Raion As Boolean) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Rpt_PrintCardConsumerInvoice_Jur", New Object() {Notification, Verification, Prepayment, Autograph, Bill, IDContract, IDStartPeriod, Raion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Rpt_PrintCardConsumerInvoice_JurAsync(ByVal Notification As Boolean, ByVal Verification As Boolean, ByVal Prepayment As Boolean, ByVal Autograph As Boolean, ByVal Bill As Boolean, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal Raion As Boolean)
            Me.Rpt_PrintCardConsumerInvoice_JurAsync(Notification, Verification, Prepayment, Autograph, Bill, IDContract, IDStartPeriod, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Rpt_PrintCardConsumerInvoice_JurAsync(ByVal Notification As Boolean, ByVal Verification As Boolean, ByVal Prepayment As Boolean, ByVal Autograph As Boolean, ByVal Bill As Boolean, ByVal IDContract As Integer, ByVal IDStartPeriod As Integer, ByVal Raion As Boolean, ByVal userState As Object)
            If (Me.Rpt_PrintCardConsumerInvoice_JurOperationCompleted Is Nothing) Then
                Me.Rpt_PrintCardConsumerInvoice_JurOperationCompleted = AddressOf Me.OnRpt_PrintCardConsumerInvoice_JurOperationCompleted
            End If
            Me.InvokeAsync("Rpt_PrintCardConsumerInvoice_Jur", New Object() {Notification, Verification, Prepayment, Autograph, Bill, IDContract, IDStartPeriod, Raion}, Me.Rpt_PrintCardConsumerInvoice_JurOperationCompleted, userState)
        End Sub
        
        Private Sub OnRpt_PrintCardConsumerInvoice_JurOperationCompleted(ByVal arg As Object)
            If (Not (Me.Rpt_PrintCardConsumerInvoice_JurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Rpt_PrintCardConsumerInvoice_JurCompleted(Me, New Rpt_PrintCardConsumerInvoice_JurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/UserCard", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UserCard(ByVal UID As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("UserCard", New Object() {UID})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub UserCardAsync(ByVal UID As String)
            Me.UserCardAsync(UID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub UserCardAsync(ByVal UID As String, ByVal userState As Object)
            If (Me.UserCardOperationCompleted Is Nothing) Then
                Me.UserCardOperationCompleted = AddressOf Me.OnUserCardOperationCompleted
            End If
            Me.InvokeAsync("UserCard", New Object() {UID}, Me.UserCardOperationCompleted, userState)
        End Sub
        
        Private Sub OnUserCardOperationCompleted(ByVal arg As Object)
            If (Not (Me.UserCardCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent UserCardCompleted(Me, New UserCardCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/CabinetLogStatmets", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CabinetLogStatmets(ByVal DateBegin As String, ByVal DateEnd As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("CabinetLogStatmets", New Object() {DateBegin, DateEnd})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub CabinetLogStatmetsAsync(ByVal DateBegin As String, ByVal DateEnd As String)
            Me.CabinetLogStatmetsAsync(DateBegin, DateEnd, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CabinetLogStatmetsAsync(ByVal DateBegin As String, ByVal DateEnd As String, ByVal userState As Object)
            If (Me.CabinetLogStatmetsOperationCompleted Is Nothing) Then
                Me.CabinetLogStatmetsOperationCompleted = AddressOf Me.OnCabinetLogStatmetsOperationCompleted
            End If
            Me.InvokeAsync("CabinetLogStatmets", New Object() {DateBegin, DateEnd}, Me.CabinetLogStatmetsOperationCompleted, userState)
        End Sub
        
        Private Sub OnCabinetLogStatmetsOperationCompleted(ByVal arg As Object)
            If (Not (Me.CabinetLogStatmetsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CabinetLogStatmetsCompleted(Me, New CabinetLogStatmetsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/bank_account", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function bank_account(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal raion As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("bank_account", New Object() {date_begin, date_end, BankAccount, raion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub bank_accountAsync(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal raion As Integer)
            Me.bank_accountAsync(date_begin, date_end, BankAccount, raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub bank_accountAsync(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal raion As Integer, ByVal userState As Object)
            If (Me.bank_accountOperationCompleted Is Nothing) Then
                Me.bank_accountOperationCompleted = AddressOf Me.Onbank_accountOperationCompleted
            End If
            Me.InvokeAsync("bank_account", New Object() {date_begin, date_end, BankAccount, raion}, Me.bank_accountOperationCompleted, userState)
        End Sub
        
        Private Sub Onbank_accountOperationCompleted(ByVal arg As Object)
            If (Not (Me.bank_accountCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent bank_accountCompleted(Me, New bank_accountCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/bank_account_type", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function bank_account_type(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal name_acc As String, ByVal raion As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("bank_account_type", New Object() {date_begin, date_end, BankAccount, name_acc, raion})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub bank_account_typeAsync(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal name_acc As String, ByVal raion As Integer)
            Me.bank_account_typeAsync(date_begin, date_end, BankAccount, name_acc, raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub bank_account_typeAsync(ByVal date_begin As String, ByVal date_end As String, ByVal BankAccount As String, ByVal name_acc As String, ByVal raion As Integer, ByVal userState As Object)
            If (Me.bank_account_typeOperationCompleted Is Nothing) Then
                Me.bank_account_typeOperationCompleted = AddressOf Me.Onbank_account_typeOperationCompleted
            End If
            Me.InvokeAsync("bank_account_type", New Object() {date_begin, date_end, BankAccount, name_acc, raion}, Me.bank_account_typeOperationCompleted, userState)
        End Sub
        
        Private Sub Onbank_account_typeOperationCompleted(ByVal arg As Object)
            If (Not (Me.bank_account_typeCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent bank_account_typeCompleted(Me, New bank_account_typeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/Print_ERCVedomost", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Print_ERCVedomost(ByVal DateBegin As String, ByVal DateEnd As String, ByVal IDAccounting As Integer) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("Print_ERCVedomost", New Object() {DateBegin, DateEnd, IDAccounting})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub Print_ERCVedomostAsync(ByVal DateBegin As String, ByVal DateEnd As String, ByVal IDAccounting As Integer)
            Me.Print_ERCVedomostAsync(DateBegin, DateEnd, IDAccounting, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub Print_ERCVedomostAsync(ByVal DateBegin As String, ByVal DateEnd As String, ByVal IDAccounting As Integer, ByVal userState As Object)
            If (Me.Print_ERCVedomostOperationCompleted Is Nothing) Then
                Me.Print_ERCVedomostOperationCompleted = AddressOf Me.OnPrint_ERCVedomostOperationCompleted
            End If
            Me.InvokeAsync("Print_ERCVedomost", New Object() {DateBegin, DateEnd, IDAccounting}, Me.Print_ERCVedomostOperationCompleted, userState)
        End Sub
        
        Private Sub OnPrint_ERCVedomostOperationCompleted(ByVal arg As Object)
            If (Not (Me.Print_ERCVedomostCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent Print_ERCVedomostCompleted(Me, New Print_ERCVedomostCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetPeople", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPeople(ByVal idContract As Integer, ByVal Prefix As String) As String
            Dim results() As Object = Me.Invoke("GetPeople", New Object() {idContract, Prefix})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPeopleAsync(ByVal idContract As Integer, ByVal Prefix As String)
            Me.GetPeopleAsync(idContract, Prefix, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPeopleAsync(ByVal idContract As Integer, ByVal Prefix As String, ByVal userState As Object)
            If (Me.GetPeopleOperationCompleted Is Nothing) Then
                Me.GetPeopleOperationCompleted = AddressOf Me.OnGetPeopleOperationCompleted
            End If
            Me.InvokeAsync("GetPeople", New Object() {idContract, Prefix}, Me.GetPeopleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPeopleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPeopleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPeopleCompleted(Me, New GetPeopleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetPlate", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPlate(ByVal idContract As Integer) As String
            Dim results() As Object = Me.Invoke("GetPlate", New Object() {idContract})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPlateAsync(ByVal idContract As Integer)
            Me.GetPlateAsync(idContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPlateAsync(ByVal idContract As Integer, ByVal userState As Object)
            If (Me.GetPlateOperationCompleted Is Nothing) Then
                Me.GetPlateOperationCompleted = AddressOf Me.OnGetPlateOperationCompleted
            End If
            Me.InvokeAsync("GetPlate", New Object() {idContract}, Me.GetPlateOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPlateOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPlateCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPlateCompleted(Me, New GetPlateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetOldPeople", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetOldPeople(ByVal idContract As Integer) As Boolean
            Dim results() As Object = Me.Invoke("GetOldPeople", New Object() {idContract})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetOldPeopleAsync(ByVal idContract As Integer)
            Me.GetOldPeopleAsync(idContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetOldPeopleAsync(ByVal idContract As Integer, ByVal userState As Object)
            If (Me.GetOldPeopleOperationCompleted Is Nothing) Then
                Me.GetOldPeopleOperationCompleted = AddressOf Me.OnGetOldPeopleOperationCompleted
            End If
            Me.InvokeAsync("GetOldPeople", New Object() {idContract}, Me.GetOldPeopleOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetOldPeopleOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetOldPeopleCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetOldPeopleCompleted(Me, New GetOldPeopleCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetClass", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClass(ByVal idEmeterNP As Integer, ByVal Raion As Integer) As Integer
            Dim results() As Object = Me.Invoke("GetClass", New Object() {idEmeterNP, Raion})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetClassAsync(ByVal idEmeterNP As Integer, ByVal Raion As Integer)
            Me.GetClassAsync(idEmeterNP, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetClassAsync(ByVal idEmeterNP As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.GetClassOperationCompleted Is Nothing) Then
                Me.GetClassOperationCompleted = AddressOf Me.OnGetClassOperationCompleted
            End If
            Me.InvokeAsync("GetClass", New Object() {idEmeterNP, Raion}, Me.GetClassOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetClassOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetClassCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetClassCompleted(Me, New GetClassCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetTariff", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTariff(ByVal IDRaion As Integer) As Double()
            Dim results() As Object = Me.Invoke("GetTariff", New Object() {IDRaion})
            Return CType(results(0),Double())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTariffAsync(ByVal IDRaion As Integer)
            Me.GetTariffAsync(IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTariffAsync(ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetTariffOperationCompleted Is Nothing) Then
                Me.GetTariffOperationCompleted = AddressOf Me.OnGetTariffOperationCompleted
            End If
            Me.InvokeAsync("GetTariff", New Object() {IDRaion}, Me.GetTariffOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTariffOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTariffCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTariffCompleted(Me, New GetTariffCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetTariffZone", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTariffZone() As Double()
            Dim results() As Object = Me.Invoke("GetTariffZone", New Object(-1) {})
            Return CType(results(0),Double())
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTariffZoneAsync()
            Me.GetTariffZoneAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTariffZoneAsync(ByVal userState As Object)
            If (Me.GetTariffZoneOperationCompleted Is Nothing) Then
                Me.GetTariffZoneOperationCompleted = AddressOf Me.OnGetTariffZoneOperationCompleted
            End If
            Me.InvokeAsync("GetTariffZone", New Object(-1) {}, Me.GetTariffZoneOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTariffZoneOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTariffZoneCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTariffZoneCompleted(Me, New GetTariffZoneCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ERC_Select", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ERC_Select(ByVal idCOntract As Integer) As String
            Dim results() As Object = Me.Invoke("ERC_Select", New Object() {idCOntract})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ERC_SelectAsync(ByVal idCOntract As Integer)
            Me.ERC_SelectAsync(idCOntract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ERC_SelectAsync(ByVal idCOntract As Integer, ByVal userState As Object)
            If (Me.ERC_SelectOperationCompleted Is Nothing) Then
                Me.ERC_SelectOperationCompleted = AddressOf Me.OnERC_SelectOperationCompleted
            End If
            Me.InvokeAsync("ERC_Select", New Object() {idCOntract}, Me.ERC_SelectOperationCompleted, userState)
        End Sub
        
        Private Sub OnERC_SelectOperationCompleted(ByVal arg As Object)
            If (Not (Me.ERC_SelectCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ERC_SelectCompleted(Me, New ERC_SelectCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ERC_Insert", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ERC_Insert(ByVal CODE As Integer, ByVal WTYPE As Integer, ByVal CUBE_BEG As Integer, ByVal CUBE_END As Integer, ByVal DATELASTSHOWING As Date, ByVal IDPeriod As Integer, ByVal IDTMeter As Integer, ByVal idContract As Integer, ByVal UID As Integer) As String
            Dim results() As Object = Me.Invoke("ERC_Insert", New Object() {CODE, WTYPE, CUBE_BEG, CUBE_END, DATELASTSHOWING, IDPeriod, IDTMeter, idContract, UID})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ERC_InsertAsync(ByVal CODE As Integer, ByVal WTYPE As Integer, ByVal CUBE_BEG As Integer, ByVal CUBE_END As Integer, ByVal DATELASTSHOWING As Date, ByVal IDPeriod As Integer, ByVal IDTMeter As Integer, ByVal idContract As Integer, ByVal UID As Integer)
            Me.ERC_InsertAsync(CODE, WTYPE, CUBE_BEG, CUBE_END, DATELASTSHOWING, IDPeriod, IDTMeter, idContract, UID, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ERC_InsertAsync(ByVal CODE As Integer, ByVal WTYPE As Integer, ByVal CUBE_BEG As Integer, ByVal CUBE_END As Integer, ByVal DATELASTSHOWING As Date, ByVal IDPeriod As Integer, ByVal IDTMeter As Integer, ByVal idContract As Integer, ByVal UID As Integer, ByVal userState As Object)
            If (Me.ERC_InsertOperationCompleted Is Nothing) Then
                Me.ERC_InsertOperationCompleted = AddressOf Me.OnERC_InsertOperationCompleted
            End If
            Me.InvokeAsync("ERC_Insert", New Object() {CODE, WTYPE, CUBE_BEG, CUBE_END, DATELASTSHOWING, IDPeriod, IDTMeter, idContract, UID}, Me.ERC_InsertOperationCompleted, userState)
        End Sub
        
        Private Sub OnERC_InsertOperationCompleted(ByVal arg As Object)
            If (Not (Me.ERC_InsertCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ERC_InsertCompleted(Me, New ERC_InsertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetInfoView", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoView(ByVal idObjectNP As Integer, ByVal IDRaion As Integer) As String
            Dim results() As Object = Me.Invoke("GetInfoView", New Object() {idObjectNP, IDRaion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewAsync(ByVal idObjectNP As Integer, ByVal IDRaion As Integer)
            Me.GetInfoViewAsync(idObjectNP, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewAsync(ByVal idObjectNP As Integer, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetInfoViewOperationCompleted Is Nothing) Then
                Me.GetInfoViewOperationCompleted = AddressOf Me.OnGetInfoViewOperationCompleted
            End If
            Me.InvokeAsync("GetInfoView", New Object() {idObjectNP, IDRaion}, Me.GetInfoViewOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoViewOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoViewCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoViewCompleted(Me, New GetInfoViewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetInfoViewGVS", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoViewGVS(ByVal IDTmeter As Integer) As String
            Dim results() As Object = Me.Invoke("GetInfoViewGVS", New Object() {IDTmeter})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewGVSAsync(ByVal IDTmeter As Integer)
            Me.GetInfoViewGVSAsync(IDTmeter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewGVSAsync(ByVal IDTmeter As Integer, ByVal userState As Object)
            If (Me.GetInfoViewGVSOperationCompleted Is Nothing) Then
                Me.GetInfoViewGVSOperationCompleted = AddressOf Me.OnGetInfoViewGVSOperationCompleted
            End If
            Me.InvokeAsync("GetInfoViewGVS", New Object() {IDTmeter}, Me.GetInfoViewGVSOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoViewGVSOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoViewGVSCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoViewGVSCompleted(Me, New GetInfoViewGVSCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetInfoViewJur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoViewJur(ByVal IDEmeterNP As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("GetInfoViewJur", New Object() {IDEmeterNP, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewJurAsync(ByVal IDEmeterNP As Integer, ByVal Raion As Integer)
            Me.GetInfoViewJurAsync(IDEmeterNP, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoViewJurAsync(ByVal IDEmeterNP As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.GetInfoViewJurOperationCompleted Is Nothing) Then
                Me.GetInfoViewJurOperationCompleted = AddressOf Me.OnGetInfoViewJurOperationCompleted
            End If
            Me.InvokeAsync("GetInfoViewJur", New Object() {IDEmeterNP, Raion}, Me.GetInfoViewJurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoViewJurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoViewJurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoViewJurCompleted(Me, New GetInfoViewJurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FindEmetersJur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindEmetersJur(ByVal idContract As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("FindEmetersJur", New Object() {idContract, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindEmetersJurAsync(ByVal idContract As Integer, ByVal Raion As Integer)
            Me.FindEmetersJurAsync(idContract, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindEmetersJurAsync(ByVal idContract As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.FindEmetersJurOperationCompleted Is Nothing) Then
                Me.FindEmetersJurOperationCompleted = AddressOf Me.OnFindEmetersJurOperationCompleted
            End If
            Me.InvokeAsync("FindEmetersJur", New Object() {idContract, Raion}, Me.FindEmetersJurOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindEmetersJurOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindEmetersJurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindEmetersJurCompleted(Me, New FindEmetersJurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FindObjects", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindObjects(ByVal idContract As Integer) As String
            Dim results() As Object = Me.Invoke("FindObjects", New Object() {idContract})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindObjectsAsync(ByVal idContract As Integer)
            Me.FindObjectsAsync(idContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindObjectsAsync(ByVal idContract As Integer, ByVal userState As Object)
            If (Me.FindObjectsOperationCompleted Is Nothing) Then
                Me.FindObjectsOperationCompleted = AddressOf Me.OnFindObjectsOperationCompleted
            End If
            Me.InvokeAsync("FindObjects", New Object() {idContract}, Me.FindObjectsOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindObjectsOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindObjectsCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindObjectsCompleted(Me, New FindObjectsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FindConsumer", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindConsumer(ByVal mNumberContractE As String, ByVal mIDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("FindConsumer", New Object() {mNumberContractE, mIDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindConsumerAsync(ByVal mNumberContractE As String, ByVal mIDRaion As Integer)
            Me.FindConsumerAsync(mNumberContractE, mIDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindConsumerAsync(ByVal mNumberContractE As String, ByVal mIDRaion As Integer, ByVal userState As Object)
            If (Me.FindConsumerOperationCompleted Is Nothing) Then
                Me.FindConsumerOperationCompleted = AddressOf Me.OnFindConsumerOperationCompleted
            End If
            Me.InvokeAsync("FindConsumer", New Object() {mNumberContractE, mIDRaion}, Me.FindConsumerOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindConsumerOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindConsumerCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindConsumerCompleted(Me, New FindConsumerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ShowEE", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowEE(ByVal NumberContractE As String, ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("ShowEE", New Object() {NumberContractE, IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowEEAsync(ByVal NumberContractE As String, ByVal IDRaion As Integer)
            Me.ShowEEAsync(NumberContractE, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowEEAsync(ByVal NumberContractE As String, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.ShowEEOperationCompleted Is Nothing) Then
                Me.ShowEEOperationCompleted = AddressOf Me.OnShowEEOperationCompleted
            End If
            Me.InvokeAsync("ShowEE", New Object() {NumberContractE, IDRaion}, Me.ShowEEOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowEEOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowEECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowEECompleted(Me, New ShowEECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ShowTE", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ShowTE(ByVal NumberContractE As String) As Object
            Dim results() As Object = Me.Invoke("ShowTE", New Object() {NumberContractE})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ShowTEAsync(ByVal NumberContractE As String)
            Me.ShowTEAsync(NumberContractE, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ShowTEAsync(ByVal NumberContractE As String, ByVal userState As Object)
            If (Me.ShowTEOperationCompleted Is Nothing) Then
                Me.ShowTEOperationCompleted = AddressOf Me.OnShowTEOperationCompleted
            End If
            Me.InvokeAsync("ShowTE", New Object() {NumberContractE}, Me.ShowTEOperationCompleted, userState)
        End Sub
        
        Private Sub OnShowTEOperationCompleted(ByVal arg As Object)
            If (Not (Me.ShowTECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ShowTECompleted(Me, New ShowTECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FindObjectsEE", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindObjectsEE(ByVal idContract As Integer, ByVal IDRaion As Integer) As String
            Dim results() As Object = Me.Invoke("FindObjectsEE", New Object() {idContract, IDRaion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindObjectsEEAsync(ByVal idContract As Integer, ByVal IDRaion As Integer)
            Me.FindObjectsEEAsync(idContract, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindObjectsEEAsync(ByVal idContract As Integer, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.FindObjectsEEOperationCompleted Is Nothing) Then
                Me.FindObjectsEEOperationCompleted = AddressOf Me.OnFindObjectsEEOperationCompleted
            End If
            Me.InvokeAsync("FindObjectsEE", New Object() {idContract, IDRaion}, Me.FindObjectsEEOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindObjectsEEOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindObjectsEECompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindObjectsEECompleted(Me, New FindObjectsEECompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/FindObjectsEPowering", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FindObjectsEPowering(ByVal idContract As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("FindObjectsEPowering", New Object() {idContract, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub FindObjectsEPoweringAsync(ByVal idContract As Integer, ByVal Raion As Integer)
            Me.FindObjectsEPoweringAsync(idContract, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub FindObjectsEPoweringAsync(ByVal idContract As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.FindObjectsEPoweringOperationCompleted Is Nothing) Then
                Me.FindObjectsEPoweringOperationCompleted = AddressOf Me.OnFindObjectsEPoweringOperationCompleted
            End If
            Me.InvokeAsync("FindObjectsEPowering", New Object() {idContract, Raion}, Me.FindObjectsEPoweringOperationCompleted, userState)
        End Sub
        
        Private Sub OnFindObjectsEPoweringOperationCompleted(ByVal arg As Object)
            If (Not (Me.FindObjectsEPoweringCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent FindObjectsEPoweringCompleted(Me, New FindObjectsEPoweringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/DeclaredConsumption", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DeclaredConsumption(ByVal idContract As Integer, ByVal idProduct As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("DeclaredConsumption", New Object() {idContract, idProduct, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub DeclaredConsumptionAsync(ByVal idContract As Integer, ByVal idProduct As Integer, ByVal Raion As Integer)
            Me.DeclaredConsumptionAsync(idContract, idProduct, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub DeclaredConsumptionAsync(ByVal idContract As Integer, ByVal idProduct As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.DeclaredConsumptionOperationCompleted Is Nothing) Then
                Me.DeclaredConsumptionOperationCompleted = AddressOf Me.OnDeclaredConsumptionOperationCompleted
            End If
            Me.InvokeAsync("DeclaredConsumption", New Object() {idContract, idProduct, Raion}, Me.DeclaredConsumptionOperationCompleted, userState)
        End Sub
        
        Private Sub OnDeclaredConsumptionOperationCompleted(ByVal arg As Object)
            If (Not (Me.DeclaredConsumptionCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent DeclaredConsumptionCompleted(Me, New DeclaredConsumptionCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/AmountWithoutPU", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function AmountWithoutPU(ByVal idEPowering As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("AmountWithoutPU", New Object() {idEPowering, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub AmountWithoutPUAsync(ByVal idEPowering As Integer, ByVal Raion As Integer)
            Me.AmountWithoutPUAsync(idEPowering, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub AmountWithoutPUAsync(ByVal idEPowering As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.AmountWithoutPUOperationCompleted Is Nothing) Then
                Me.AmountWithoutPUOperationCompleted = AddressOf Me.OnAmountWithoutPUOperationCompleted
            End If
            Me.InvokeAsync("AmountWithoutPU", New Object() {idEPowering, Raion}, Me.AmountWithoutPUOperationCompleted, userState)
        End Sub
        
        Private Sub OnAmountWithoutPUOperationCompleted(ByVal arg As Object)
            If (Not (Me.AmountWithoutPUCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent AmountWithoutPUCompleted(Me, New AmountWithoutPUCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetInfoTableJur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoTableJur(ByVal idEPowering As Integer, ByVal Raion As Integer) As String
            Dim results() As Object = Me.Invoke("GetInfoTableJur", New Object() {idEPowering, Raion})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoTableJurAsync(ByVal idEPowering As Integer, ByVal Raion As Integer)
            Me.GetInfoTableJurAsync(idEPowering, Raion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoTableJurAsync(ByVal idEPowering As Integer, ByVal Raion As Integer, ByVal userState As Object)
            If (Me.GetInfoTableJurOperationCompleted Is Nothing) Then
                Me.GetInfoTableJurOperationCompleted = AddressOf Me.OnGetInfoTableJurOperationCompleted
            End If
            Me.InvokeAsync("GetInfoTableJur", New Object() {idEPowering, Raion}, Me.GetInfoTableJurOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoTableJurOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoTableJurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoTableJurCompleted(Me, New GetInfoTableJurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/Yakimov", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function Yakimov(ByVal NumberContract As String) As Object
            Dim results() As Object = Me.Invoke("Yakimov", New Object() {NumberContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub YakimovAsync(ByVal NumberContract As String)
            Me.YakimovAsync(NumberContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub YakimovAsync(ByVal NumberContract As String, ByVal userState As Object)
            If (Me.YakimovOperationCompleted Is Nothing) Then
                Me.YakimovOperationCompleted = AddressOf Me.OnYakimovOperationCompleted
            End If
            Me.InvokeAsync("Yakimov", New Object() {NumberContract}, Me.YakimovOperationCompleted, userState)
        End Sub
        
        Private Sub OnYakimovOperationCompleted(ByVal arg As Object)
            If (Not (Me.YakimovCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent YakimovCompleted(Me, New YakimovCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetTempRecord", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTempRecord(ByVal midContract As String, ByVal mIDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetTempRecord", New Object() {midContract, mIDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetTempRecordAsync(ByVal midContract As String, ByVal mIDRaion As Integer)
            Me.GetTempRecordAsync(midContract, mIDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetTempRecordAsync(ByVal midContract As String, ByVal mIDRaion As Integer, ByVal userState As Object)
            If (Me.GetTempRecordOperationCompleted Is Nothing) Then
                Me.GetTempRecordOperationCompleted = AddressOf Me.OnGetTempRecordOperationCompleted
            End If
            Me.InvokeAsync("GetTempRecord", New Object() {midContract, mIDRaion}, Me.GetTempRecordOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetTempRecordOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetTempRecordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetTempRecordCompleted(Me, New GetTempRecordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetPeriodList", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPeriodList(ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetPeriodList", New Object() {IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPeriodListAsync(ByVal IDRaion As Integer)
            Me.GetPeriodListAsync(IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPeriodListAsync(ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetPeriodListOperationCompleted Is Nothing) Then
                Me.GetPeriodListOperationCompleted = AddressOf Me.OnGetPeriodListOperationCompleted
            End If
            Me.InvokeAsync("GetPeriodList", New Object() {IDRaion}, Me.GetPeriodListOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPeriodListOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPeriodListCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPeriodListCompleted(Me, New GetPeriodListCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/SaveActualWM", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveActualWM(ByVal IDTMeter As String, ByVal Value As String, ByVal Value1 As String, ByVal Value2 As String, ByVal Value3 As String, ByVal Value4 As String, ByVal Value5 As String, ByVal Value6 As String, ByVal Value7 As String, ByVal Value8 As String, ByVal Value9 As String) As Object
            Dim results() As Object = Me.Invoke("SaveActualWM", New Object() {IDTMeter, Value, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveActualWMAsync(ByVal IDTMeter As String, ByVal Value As String, ByVal Value1 As String, ByVal Value2 As String, ByVal Value3 As String, ByVal Value4 As String, ByVal Value5 As String, ByVal Value6 As String, ByVal Value7 As String, ByVal Value8 As String, ByVal Value9 As String)
            Me.SaveActualWMAsync(IDTMeter, Value, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveActualWMAsync(ByVal IDTMeter As String, ByVal Value As String, ByVal Value1 As String, ByVal Value2 As String, ByVal Value3 As String, ByVal Value4 As String, ByVal Value5 As String, ByVal Value6 As String, ByVal Value7 As String, ByVal Value8 As String, ByVal Value9 As String, ByVal userState As Object)
            If (Me.SaveActualWMOperationCompleted Is Nothing) Then
                Me.SaveActualWMOperationCompleted = AddressOf Me.OnSaveActualWMOperationCompleted
            End If
            Me.InvokeAsync("SaveActualWM", New Object() {IDTMeter, Value, Value1, Value2, Value3, Value4, Value5, Value6, Value7, Value8, Value9}, Me.SaveActualWMOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveActualWMOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveActualWMCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveActualWMCompleted(Me, New SaveActualWMCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/SaveActual", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SaveActual(ByVal idObject As Integer, ByVal Display As Integer, ByVal Display2 As Integer) As Object
            Dim results() As Object = Me.Invoke("SaveActual", New Object() {idObject, Display, Display2})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub SaveActualAsync(ByVal idObject As Integer, ByVal Display As Integer, ByVal Display2 As Integer)
            Me.SaveActualAsync(idObject, Display, Display2, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub SaveActualAsync(ByVal idObject As Integer, ByVal Display As Integer, ByVal Display2 As Integer, ByVal userState As Object)
            If (Me.SaveActualOperationCompleted Is Nothing) Then
                Me.SaveActualOperationCompleted = AddressOf Me.OnSaveActualOperationCompleted
            End If
            Me.InvokeAsync("SaveActual", New Object() {idObject, Display, Display2}, Me.SaveActualOperationCompleted, userState)
        End Sub
        
        Private Sub OnSaveActualOperationCompleted(ByVal arg As Object)
            If (Not (Me.SaveActualCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent SaveActualCompleted(Me, New SaveActualCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/tmeters_jur", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function tmeters_jur(ByVal id_contract As Integer) As Object
            Dim results() As Object = Me.Invoke("tmeters_jur", New Object() {id_contract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub tmeters_jurAsync(ByVal id_contract As Integer)
            Me.tmeters_jurAsync(id_contract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub tmeters_jurAsync(ByVal id_contract As Integer, ByVal userState As Object)
            If (Me.tmeters_jurOperationCompleted Is Nothing) Then
                Me.tmeters_jurOperationCompleted = AddressOf Me.Ontmeters_jurOperationCompleted
            End If
            Me.InvokeAsync("tmeters_jur", New Object() {id_contract}, Me.tmeters_jurOperationCompleted, userState)
        End Sub
        
        Private Sub Ontmeters_jurOperationCompleted(ByVal arg As Object)
            If (Not (Me.tmeters_jurCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent tmeters_jurCompleted(Me, New tmeters_jurCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/tmeter_dates", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function tmeter_dates(ByVal id_tmeter As Integer) As Object
            Dim results() As Object = Me.Invoke("tmeter_dates", New Object() {id_tmeter})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub tmeter_datesAsync(ByVal id_tmeter As Integer)
            Me.tmeter_datesAsync(id_tmeter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub tmeter_datesAsync(ByVal id_tmeter As Integer, ByVal userState As Object)
            If (Me.tmeter_datesOperationCompleted Is Nothing) Then
                Me.tmeter_datesOperationCompleted = AddressOf Me.Ontmeter_datesOperationCompleted
            End If
            Me.InvokeAsync("tmeter_dates", New Object() {id_tmeter}, Me.tmeter_datesOperationCompleted, userState)
        End Sub
        
        Private Sub Ontmeter_datesOperationCompleted(ByVal arg As Object)
            If (Not (Me.tmeter_datesCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent tmeter_datesCompleted(Me, New tmeter_datesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/InfoTmeterAscute", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function InfoTmeterAscute(ByVal id_contract As Integer, ByVal id_tmeter As Integer) As Object
            Dim results() As Object = Me.Invoke("InfoTmeterAscute", New Object() {id_contract, id_tmeter})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub InfoTmeterAscuteAsync(ByVal id_contract As Integer, ByVal id_tmeter As Integer)
            Me.InfoTmeterAscuteAsync(id_contract, id_tmeter, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub InfoTmeterAscuteAsync(ByVal id_contract As Integer, ByVal id_tmeter As Integer, ByVal userState As Object)
            If (Me.InfoTmeterAscuteOperationCompleted Is Nothing) Then
                Me.InfoTmeterAscuteOperationCompleted = AddressOf Me.OnInfoTmeterAscuteOperationCompleted
            End If
            Me.InvokeAsync("InfoTmeterAscute", New Object() {id_contract, id_tmeter}, Me.InfoTmeterAscuteOperationCompleted, userState)
        End Sub
        
        Private Sub OnInfoTmeterAscuteOperationCompleted(ByVal arg As Object)
            If (Not (Me.InfoTmeterAscuteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent InfoTmeterAscuteCompleted(Me, New InfoTmeterAscuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/ReportTmeterAscute", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ReportTmeterAscute(ByVal serial_number As String, ByVal date_begin As Date, ByVal date_end As Date) As Object
            Dim results() As Object = Me.Invoke("ReportTmeterAscute", New Object() {serial_number, date_begin, date_end})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub ReportTmeterAscuteAsync(ByVal serial_number As String, ByVal date_begin As Date, ByVal date_end As Date)
            Me.ReportTmeterAscuteAsync(serial_number, date_begin, date_end, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub ReportTmeterAscuteAsync(ByVal serial_number As String, ByVal date_begin As Date, ByVal date_end As Date, ByVal userState As Object)
            If (Me.ReportTmeterAscuteOperationCompleted Is Nothing) Then
                Me.ReportTmeterAscuteOperationCompleted = AddressOf Me.OnReportTmeterAscuteOperationCompleted
            End If
            Me.InvokeAsync("ReportTmeterAscute", New Object() {serial_number, date_begin, date_end}, Me.ReportTmeterAscuteOperationCompleted, userState)
        End Sub
        
        Private Sub OnReportTmeterAscuteOperationCompleted(ByVal arg As Object)
            If (Not (Me.ReportTmeterAscuteCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent ReportTmeterAscuteCompleted(Me, New ReportTmeterAscuteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetPeriodList_CardAbonent", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPeriodList_CardAbonent(ByVal IDRaion As Integer) As Object
            Dim results() As Object = Me.Invoke("GetPeriodList_CardAbonent", New Object() {IDRaion})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPeriodList_CardAbonentAsync(ByVal IDRaion As Integer)
            Me.GetPeriodList_CardAbonentAsync(IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPeriodList_CardAbonentAsync(ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.GetPeriodList_CardAbonentOperationCompleted Is Nothing) Then
                Me.GetPeriodList_CardAbonentOperationCompleted = AddressOf Me.OnGetPeriodList_CardAbonentOperationCompleted
            End If
            Me.InvokeAsync("GetPeriodList_CardAbonent", New Object() {IDRaion}, Me.GetPeriodList_CardAbonentOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPeriodList_CardAbonentOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPeriodList_CardAbonentCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPeriodList_CardAbonentCompleted(Me, New GetPeriodList_CardAbonentCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/OnOffCabinet", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function OnOffCabinet(ByVal mRaion As Integer, ByVal IDRaion As Integer) As Integer
            Dim results() As Object = Me.Invoke("OnOffCabinet", New Object() {mRaion, IDRaion})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Overloads Sub OnOffCabinetAsync(ByVal mRaion As Integer, ByVal IDRaion As Integer)
            Me.OnOffCabinetAsync(mRaion, IDRaion, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub OnOffCabinetAsync(ByVal mRaion As Integer, ByVal IDRaion As Integer, ByVal userState As Object)
            If (Me.OnOffCabinetOperationCompleted Is Nothing) Then
                Me.OnOffCabinetOperationCompleted = AddressOf Me.OnOnOffCabinetOperationCompleted
            End If
            Me.InvokeAsync("OnOffCabinet", New Object() {mRaion, IDRaion}, Me.OnOffCabinetOperationCompleted, userState)
        End Sub
        
        Private Sub OnOnOffCabinetOperationCompleted(ByVal arg As Object)
            If (Not (Me.OnOffCabinetCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent OnOffCabinetCompleted(Me, New OnOffCabinetCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetPeriodListERC", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetPeriodListERC() As Object
            Dim results() As Object = Me.Invoke("GetPeriodListERC", New Object(-1) {})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetPeriodListERCAsync()
            Me.GetPeriodListERCAsync(Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetPeriodListERCAsync(ByVal userState As Object)
            If (Me.GetPeriodListERCOperationCompleted Is Nothing) Then
                Me.GetPeriodListERCOperationCompleted = AddressOf Me.OnGetPeriodListERCOperationCompleted
            End If
            Me.InvokeAsync("GetPeriodListERC", New Object(-1) {}, Me.GetPeriodListERCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetPeriodListERCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetPeriodListERCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetPeriodListERCCompleted(Me, New GetPeriodListERCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetIDAccounting", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetIDAccounting(ByVal NumberContract As String) As Object
            Dim results() As Object = Me.Invoke("GetIDAccounting", New Object() {NumberContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetIDAccountingAsync(ByVal NumberContract As String)
            Me.GetIDAccountingAsync(NumberContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetIDAccountingAsync(ByVal NumberContract As String, ByVal userState As Object)
            If (Me.GetIDAccountingOperationCompleted Is Nothing) Then
                Me.GetIDAccountingOperationCompleted = AddressOf Me.OnGetIDAccountingOperationCompleted
            End If
            Me.InvokeAsync("GetIDAccounting", New Object() {NumberContract}, Me.GetIDAccountingOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetIDAccountingOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetIDAccountingCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetIDAccountingCompleted(Me, New GetIDAccountingCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetBeginDayPeriod", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetBeginDayPeriod(ByVal IDPeriod As Integer) As Object
            Dim results() As Object = Me.Invoke("GetBeginDayPeriod", New Object() {IDPeriod})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetBeginDayPeriodAsync(ByVal IDPeriod As Integer)
            Me.GetBeginDayPeriodAsync(IDPeriod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetBeginDayPeriodAsync(ByVal IDPeriod As Integer, ByVal userState As Object)
            If (Me.GetBeginDayPeriodOperationCompleted Is Nothing) Then
                Me.GetBeginDayPeriodOperationCompleted = AddressOf Me.OnGetBeginDayPeriodOperationCompleted
            End If
            Me.InvokeAsync("GetBeginDayPeriod", New Object() {IDPeriod}, Me.GetBeginDayPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetBeginDayPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetBeginDayPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetBeginDayPeriodCompleted(Me, New GetBeginDayPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetEndDayPeriod", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetEndDayPeriod(ByVal IDPeriod As Integer) As Object
            Dim results() As Object = Me.Invoke("GetEndDayPeriod", New Object() {IDPeriod})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetEndDayPeriodAsync(ByVal IDPeriod As Integer)
            Me.GetEndDayPeriodAsync(IDPeriod, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetEndDayPeriodAsync(ByVal IDPeriod As Integer, ByVal userState As Object)
            If (Me.GetEndDayPeriodOperationCompleted Is Nothing) Then
                Me.GetEndDayPeriodOperationCompleted = AddressOf Me.OnGetEndDayPeriodOperationCompleted
            End If
            Me.InvokeAsync("GetEndDayPeriod", New Object() {IDPeriod}, Me.GetEndDayPeriodOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetEndDayPeriodOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetEndDayPeriodCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetEndDayPeriodCompleted(Me, New GetEndDayPeriodCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetAddressObjectsERC", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAddressObjectsERC(ByVal NumberContract As String) As Object
            Dim results() As Object = Me.Invoke("GetAddressObjectsERC", New Object() {NumberContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetAddressObjectsERCAsync(ByVal NumberContract As String)
            Me.GetAddressObjectsERCAsync(NumberContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetAddressObjectsERCAsync(ByVal NumberContract As String, ByVal userState As Object)
            If (Me.GetAddressObjectsERCOperationCompleted Is Nothing) Then
                Me.GetAddressObjectsERCOperationCompleted = AddressOf Me.OnGetAddressObjectsERCOperationCompleted
            End If
            Me.InvokeAsync("GetAddressObjectsERC", New Object() {NumberContract}, Me.GetAddressObjectsERCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetAddressObjectsERCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetAddressObjectsERCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetAddressObjectsERCCompleted(Me, New GetAddressObjectsERCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("test123/GetInfoContractsERC", RequestNamespace:="test123", ResponseNamespace:="test123", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetInfoContractsERC(ByVal NumberContract As String) As Object
            Dim results() As Object = Me.Invoke("GetInfoContractsERC", New Object() {NumberContract})
            Return CType(results(0),Object)
        End Function
        
        '''<remarks/>
        Public Overloads Sub GetInfoContractsERCAsync(ByVal NumberContract As String)
            Me.GetInfoContractsERCAsync(NumberContract, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub GetInfoContractsERCAsync(ByVal NumberContract As String, ByVal userState As Object)
            If (Me.GetInfoContractsERCOperationCompleted Is Nothing) Then
                Me.GetInfoContractsERCOperationCompleted = AddressOf Me.OnGetInfoContractsERCOperationCompleted
            End If
            Me.InvokeAsync("GetInfoContractsERC", New Object() {NumberContract}, Me.GetInfoContractsERCOperationCompleted, userState)
        End Sub
        
        Private Sub OnGetInfoContractsERCOperationCompleted(ByVal arg As Object)
            If (Not (Me.GetInfoContractsERCCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent GetInfoContractsERCCompleted(Me, New GetInfoContractsERCCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FillXmlCompletedEventHandler(ByVal sender As Object, ByVal e As FillXmlCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FillXmlCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetIDEmeterNPCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDEmeterNPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDEmeterNPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetIDPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetCurrentPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As GetCurrentPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetCurrentPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetIDObjectNPCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDObjectNPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDObjectNPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetDateTimeCompletedEventHandler(ByVal sender As Object, ByVal e As GetDateTimeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDateTimeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ControlerSKCompletedEventHandler(ByVal sender As Object, ByVal e As ControlerSKCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ControlerSKCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub StatmentsDllZoneCompletedEventHandler(ByVal sender As Object, ByVal e As StatmentsDllZoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatmentsDllZoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub StatmentsDllCompletedEventHandler(ByVal sender As Object, ByVal e As StatmentsDllCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class StatmentsDllCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetIDEmeterNPbyObjCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDEmeterNPbyObjCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDEmeterNPbyObjCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub idTmeterCompletedEventHandler(ByVal sender As Object, ByVal e As idTmeterCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class idTmeterCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetDateTimeGVSCompletedEventHandler(ByVal sender As Object, ByVal e As GetDateTimeGVSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetDateTimeGVSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub Rpt_PrintCardConsumer_JurCompletedEventHandler(ByVal sender As Object, ByVal e As Rpt_PrintCardConsumer_JurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Rpt_PrintCardConsumer_JurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ObjectEECompletedEventHandler(ByVal sender As Object, ByVal e As ObjectEECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObjectEECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ObjectTECompletedEventHandler(ByVal sender As Object, ByVal e As ObjectTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ObjectTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub AccountCardCGPCompletedEventHandler(ByVal sender As Object, ByVal e As AccountCardCGPCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountCardCGPCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub AccountCardERCCompletedEventHandler(ByVal sender As Object, ByVal e As AccountCardERCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountCardERCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub AccountCardERC_RaionFizCompletedEventHandler(ByVal sender As Object, ByVal e As AccountCardERC_RaionFizCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AccountCardERC_RaionFizCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SchetKvitCompletedEventHandler(ByVal sender As Object, ByVal e As SchetKvitCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SchetKvitCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SchetKvitByTempRecordCompletedEventHandler(ByVal sender As Object, ByVal e As SchetKvitByTempRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SchetKvitByTempRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SchetKvitByTempRecord_RaionFizCompletedEventHandler(ByVal sender As Object, ByVal e As SchetKvitByTempRecord_RaionFizCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SchetKvitByTempRecord_RaionFizCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub Rpt_PrintCardConsumerInvoice_JurCompletedEventHandler(ByVal sender As Object, ByVal e As Rpt_PrintCardConsumerInvoice_JurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Rpt_PrintCardConsumerInvoice_JurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub UserCardCompletedEventHandler(ByVal sender As Object, ByVal e As UserCardCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class UserCardCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub CabinetLogStatmetsCompletedEventHandler(ByVal sender As Object, ByVal e As CabinetLogStatmetsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CabinetLogStatmetsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub bank_accountCompletedEventHandler(ByVal sender As Object, ByVal e As bank_accountCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class bank_accountCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub bank_account_typeCompletedEventHandler(ByVal sender As Object, ByVal e As bank_account_typeCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class bank_account_typeCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub Print_ERCVedomostCompletedEventHandler(ByVal sender As Object, ByVal e As Print_ERCVedomostCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class Print_ERCVedomostCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetPeopleCompletedEventHandler(ByVal sender As Object, ByVal e As GetPeopleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPeopleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetPlateCompletedEventHandler(ByVal sender As Object, ByVal e As GetPlateCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPlateCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetOldPeopleCompletedEventHandler(ByVal sender As Object, ByVal e As GetOldPeopleCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetOldPeopleCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetClassCompletedEventHandler(ByVal sender As Object, ByVal e As GetClassCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetClassCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetTariffCompletedEventHandler(ByVal sender As Object, ByVal e As GetTariffCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTariffCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetTariffZoneCompletedEventHandler(ByVal sender As Object, ByVal e As GetTariffZoneCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTariffZoneCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Double()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Double())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ERC_SelectCompletedEventHandler(ByVal sender As Object, ByVal e As ERC_SelectCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ERC_SelectCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ERC_InsertCompletedEventHandler(ByVal sender As Object, ByVal e As ERC_InsertCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ERC_InsertCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetInfoViewCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoViewCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoViewCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetInfoViewGVSCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoViewGVSCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoViewGVSCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetInfoViewJurCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoViewJurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoViewJurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FindEmetersJurCompletedEventHandler(ByVal sender As Object, ByVal e As FindEmetersJurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindEmetersJurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FindObjectsCompletedEventHandler(ByVal sender As Object, ByVal e As FindObjectsCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindObjectsCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FindConsumerCompletedEventHandler(ByVal sender As Object, ByVal e As FindConsumerCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindConsumerCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ShowEECompletedEventHandler(ByVal sender As Object, ByVal e As ShowEECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowEECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ShowTECompletedEventHandler(ByVal sender As Object, ByVal e As ShowTECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ShowTECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FindObjectsEECompletedEventHandler(ByVal sender As Object, ByVal e As FindObjectsEECompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindObjectsEECompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub FindObjectsEPoweringCompletedEventHandler(ByVal sender As Object, ByVal e As FindObjectsEPoweringCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class FindObjectsEPoweringCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub DeclaredConsumptionCompletedEventHandler(ByVal sender As Object, ByVal e As DeclaredConsumptionCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class DeclaredConsumptionCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub AmountWithoutPUCompletedEventHandler(ByVal sender As Object, ByVal e As AmountWithoutPUCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class AmountWithoutPUCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetInfoTableJurCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoTableJurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoTableJurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub YakimovCompletedEventHandler(ByVal sender As Object, ByVal e As YakimovCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class YakimovCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetTempRecordCompletedEventHandler(ByVal sender As Object, ByVal e As GetTempRecordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetTempRecordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetPeriodListCompletedEventHandler(ByVal sender As Object, ByVal e As GetPeriodListCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPeriodListCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SaveActualWMCompletedEventHandler(ByVal sender As Object, ByVal e As SaveActualWMCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveActualWMCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub SaveActualCompletedEventHandler(ByVal sender As Object, ByVal e As SaveActualCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class SaveActualCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub tmeters_jurCompletedEventHandler(ByVal sender As Object, ByVal e As tmeters_jurCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class tmeters_jurCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub tmeter_datesCompletedEventHandler(ByVal sender As Object, ByVal e As tmeter_datesCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class tmeter_datesCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub InfoTmeterAscuteCompletedEventHandler(ByVal sender As Object, ByVal e As InfoTmeterAscuteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class InfoTmeterAscuteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub ReportTmeterAscuteCompletedEventHandler(ByVal sender As Object, ByVal e As ReportTmeterAscuteCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class ReportTmeterAscuteCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetPeriodList_CardAbonentCompletedEventHandler(ByVal sender As Object, ByVal e As GetPeriodList_CardAbonentCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPeriodList_CardAbonentCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub OnOffCabinetCompletedEventHandler(ByVal sender As Object, ByVal e As OnOffCabinetCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class OnOffCabinetCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Integer
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Integer)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetPeriodListERCCompletedEventHandler(ByVal sender As Object, ByVal e As GetPeriodListERCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetPeriodListERCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetIDAccountingCompletedEventHandler(ByVal sender As Object, ByVal e As GetIDAccountingCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetIDAccountingCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetBeginDayPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As GetBeginDayPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetBeginDayPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetEndDayPeriodCompletedEventHandler(ByVal sender As Object, ByVal e As GetEndDayPeriodCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetEndDayPeriodCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetAddressObjectsERCCompletedEventHandler(ByVal sender As Object, ByVal e As GetAddressObjectsERCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetAddressObjectsERCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0")>  _
    Public Delegate Sub GetInfoContractsERCCompletedEventHandler(ByVal sender As Object, ByVal e As GetInfoContractsERCCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3761.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class GetInfoContractsERCCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Object
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Object)
            End Get
        End Property
    End Class
End Namespace
